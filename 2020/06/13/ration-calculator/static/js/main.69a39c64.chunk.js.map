{"version":3,"sources":["components/item/index.jsx","App.js","serviceWorker.js","index.js"],"names":["useState","React","Item","onChange","locked","onDelete","id","name","setName","value","setValue","confirmed","setConfirmed","isDisabled","className","htmlFor","disabled","e","target","onClick","alert","Number","isNaN","useReducer","useCallback","getUniqId","Date","now","Math","random","Actions","dataMock","initState","Map","reducer","state","action","type","values","delete","set","App","setLocked","items","dispatch","base","setBase","handleConfirm","originBase","next","size","entries","every","keys","map","key","index","comparedValue","round","toFixed","calcRatioValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69a39c64.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.scss\";\n\nconst { useState } = React;\n\nconst Item = ({ onChange, locked, onDelete, id }) => {\n  const [name, setName] = useState(\"\");\n  const [value, setValue] = useState(\"\");\n  const [confirmed, setConfirmed] = useState(false);\n\n  const handleConfirm = () => {\n    if (name === \"\") return alert(\"确认前， 要输入名字\");\n    if (Number.isNaN(+value))\n      return alert(\"输入的大小不是纯数字，检查一下是不是含有中文字符\");\n    if (+value === 0) return alert(\"大小必须大于 0\");\n    setConfirmed(true);\n    onChange({ id, name, value, confirmed: true });\n  };\n\n  const isDisabled = confirmed || locked;\n\n  return (\n    <div className=\"input-item\">\n      <div>\n        <label htmlFor=\"name\">名称：</label>\n        <input\n          disabled={isDisabled}\n          id=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"value\">大小：</label>\n        <input\n          disabled={isDisabled}\n          id=\"value\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n        />\n      </div>\n      <div className=\"item-action-btn\">\n        <button disabled={isDisabled} onClick={handleConfirm}>\n          确认\n        </button>\n        <button disabled={locked} onClick={onDelete}>\n          删除此项\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Item;\n","import React from \"react\";\nimport \"./App.scss\";\n\nimport AddItem from \"./components/item\";\n\nconst { useState, useReducer, useCallback } = React;\n\nconst getUniqId = () => Date.now() + Math.random() * 1000000;\n\nconst Actions = {\n  add: \"add\",\n  delete: \"delete\",\n  modify: \"modify\",\n};\n\nconst dataMock = { name: \"\", value: \"\", confirmed: false };\n\nconst initState = new Map([[getUniqId(), dataMock]]);\n\nconst reducer = (state, action) => {\n  const { type, id, values } = action;\n  switch (type) {\n    case Actions.add: {\n      return new Map([...state, [getUniqId(), dataMock]]);\n    }\n    case Actions.delete: {\n      state.delete(id);\n      return new Map([...state]);\n    }\n    case Actions.modify: {\n      state.set(id, values);\n      return new Map([...state]);\n    }\n    default:\n      break;\n  }\n};\n\nconst calcRatioValue = (originBase, base, comparedValue) => {\n  return (\n    Math.round(((+comparedValue * +base) / +originBase.value) * 100) / 100\n  ).toFixed(2);\n};\n\nfunction App() {\n  const [locked, setLocked] = useState(false);\n  const [items, dispatch] = useReducer(reducer, initState);\n  const [base, setBase] = useState(\"0\");\n  const handleConfirm = useCallback((values) => {\n    dispatch({ type: Actions.modify, values, id: values.id });\n  }, []);\n\n  const handleLock = () => {\n    if (locked === true) {\n      return setLocked(false);\n    }\n\n    /** 锁定前, 要确保没有数据是异常的 */\n    if (\n      items.size > 1 &&\n      [...items.entries()].every(([key, obj]) => obj.confirmed === true)\n    ) {\n      setLocked(true);\n    }\n  };\n\n  const originBase = items.values().next().value;\n\n  return (\n    <div className=\"App\">\n      <div className=\"input-area\">\n        <div className=\"action-btn\">\n          <button\n            className=\"add-item-btn\"\n            onClick={() => dispatch({ type: Actions.add })}\n            disabled={locked}\n          >\n            添加新项\n          </button>\n          <button className=\"lock-item-btn\" onClick={handleLock}>\n            {locked ? \"解除锁定\" : \"锁定\"}\n          </button>\n          锁定前，要确认所有数据\n        </div>\n        <div className=\"item-list\">\n          {[...items.keys()].map((key) => {\n            return (\n              <AddItem\n                id={key}\n                locked={locked}\n                key={key}\n                onChange={handleConfirm}\n                onDelete={() => dispatch({ type: Actions.delete, id: key })}\n              />\n            );\n          })}\n        </div>\n      </div>\n      {locked && (\n        <fieldset>\n          <legend>比例计算</legend>\n          <p>注意, 会自动取上面的第一项作为基准, 去计算其他数据的比例</p>\n          <label htmlFor=\"base-data\">\n            输入新的\n            <span className=\"red\">\n              {`【${items.values().next().value.name}】` || \"数据\"}\n            </span>\n            的大小：\n          </label>\n          <input\n            id=\"base-data\"\n            onChange={(e) => setBase(e.target.value)}\n            value={base}\n          />\n          <div>\n            <p>计算结果</p>\n            <ul className=\"calculated-items-container\">\n              {[...items.entries()].map(([key, value], index) => {\n                return (\n                  <li className=\"calculated-item\" key={key}>\n                    <p>名称：{value.name}</p>\n                    <p>大小：{calcRatioValue(originBase, base, value.value)}</p>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </fieldset>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}